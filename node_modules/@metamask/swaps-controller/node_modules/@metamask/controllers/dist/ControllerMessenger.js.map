{"version":3,"file":"ControllerMessenger.js","sourceRoot":"","sources":["../src/ControllerMessenger.ts"],"names":[],"mappings":"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","sourcesContent":["type ActionHandler<Action, ActionType> = (\n  ...args: ExtractActionParameters<Action, ActionType>\n) => ExtractActionResponse<Action, ActionType>;\ntype ExtractActionParameters<Action, T> = Action extends {\n  type: T;\n  handler: (...args: infer H) => any;\n}\n  ? H\n  : never;\ntype ExtractActionResponse<Action, T> = Action extends {\n  type: T;\n  handler: (...args: any) => infer H;\n}\n  ? H\n  : never;\n\ntype ExtractEventHandler<Event, T> = Event extends { type: T; payload: infer P }\n  ? P extends any[]\n    ? (...payload: P) => void\n    : never\n  : never;\ntype ExtractEventPayload<Event, T> = Event extends { type: T; payload: infer P }\n  ? P\n  : never;\n\ntype ActionConstraint = { type: string; handler: (...args: any) => unknown };\ntype EventConstraint = { type: string; payload: unknown[] };\n\n/**\n * A namespaced string\n *\n * This type verifies that the string T is prefixed by the string Name followed by a colon.\n */\nexport type Namespaced<Name extends string, T> = T extends `${Name}:${string}`\n  ? T\n  : never;\n\n/**\n * A restricted controller messenger.\n *\n * This acts as a wrapper around the controller messenger instance that restricts access to actions\n * and events.\n */\nexport class RestrictedControllerMessenger<\n  N extends string,\n  Action extends ActionConstraint,\n  Event extends EventConstraint,\n  AllowedAction extends string,\n  AllowedEvent extends string\n> {\n  private controllerMessenger: ControllerMessenger<Action, Event>;\n\n  private controllerName: N;\n\n  private allowedActions: AllowedAction[];\n\n  private allowedEvents: AllowedEvent[];\n\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   *   controller name). This grants \"ownership\" of actions and events under this namespace to the\n   *   restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   *   should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   *   should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents,\n  }: {\n    controllerMessenger: ControllerMessenger<Action, Event>;\n    name: N;\n    allowedActions: AllowedAction[];\n    allowedEvents: AllowedEvent[];\n  }) {\n    this.controllerMessenger = controllerMessenger;\n    this.controllerName = name;\n    this.allowedActions = allowedActions;\n    this.allowedEvents = allowedEvents;\n  }\n\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler- The action handler. This function gets called when the `call` method is\n   *   invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   */\n  registerActionHandler<T extends Namespaced<N, Action['type']>>(\n    action: T,\n    handler: ActionHandler<Action, T>,\n  ) {\n    /* istanbul ignore if */ // Branch unreachable with valid types\n    if (!action.startsWith(`${this.controllerName}:`)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${this.controllerName}:'`,\n      );\n    }\n    return this.controllerMessenger.registerActionHandler(action, handler);\n  }\n\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   */\n  unregisterActionHandler<T extends Namespaced<N, Action['type']>>(action: T) {\n    /* istanbul ignore if */ // Branch unreachable with valid types\n    if (!action.startsWith(`${this.controllerName}:`)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${this.controllerName}:'`,\n      );\n    }\n    return this.controllerMessenger.unregisterActionHandler(action);\n  }\n\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   *   registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   */\n  call<T extends AllowedAction>(\n    action: T,\n    ...params: ExtractActionParameters<Action, T>\n  ): ExtractActionResponse<Action, T> {\n    /* istanbul ignore if */ // Branch unreachable with valid types\n    if (!this.allowedActions.includes(action)) {\n      throw new Error(`Action missing from allow list: ${action}`);\n    }\n    return this.controllerMessenger.call(action, ...params);\n  }\n\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   *   match the type of this payload.\n   */\n  publish<E extends Namespaced<N, Event['type']>>(\n    event: E,\n    ...payload: ExtractEventPayload<Event, E>\n  ) {\n    /* istanbul ignore if */ // Branch unreachable with valid types\n    if (!event.startsWith(`${this.controllerName}:`)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${this.controllerName}:'`,\n      );\n    }\n    return this.controllerMessenger.publish(event, ...payload);\n  }\n\n  /**\n   * Subscribe to an event.\n   *\n   * Registers the given function as an event handler for the given event type.\n   *\n   * The event type being subscribed to must be on the event allowlist.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler. The type of the parameters for this event handler must\n   *   match the type of the payload for this event type.\n   */\n  subscribe<E extends AllowedEvent>(\n    event: E,\n    handler: ExtractEventHandler<Event, E>,\n  ) {\n    /* istanbul ignore if */ // Branch unreachable with valid types\n    if (!this.allowedEvents.includes(event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    return this.controllerMessenger.subscribe(event, handler);\n  }\n\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   */\n  unsubscribe<E extends AllowedEvent>(\n    event: E,\n    handler: ExtractEventHandler<Event, E>,\n  ) {\n    /* istanbul ignore if */ // Branch unreachable with valid types\n    if (!this.allowedEvents.includes(event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    return this.controllerMessenger.unsubscribe(event, handler);\n  }\n\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   */\n  clearEventSubscriptions<E extends Namespaced<N, Event['type']>>(event: E) {\n    /* istanbul ignore if */ // Branch unreachable with valid types\n    if (!event.startsWith(`${this.controllerName}:`)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${this.controllerName}:'`,\n      );\n    }\n    return this.controllerMessenger.clearEventSubscriptions(event);\n  }\n}\n\n/**\n * A messaging system for controllers.\n *\n * The controller messenger allows registering functions as 'actions' that can be called elsewhere,\n * and it allows publishing and subscribing to events. Both actions and events are identified by\n * unique strings.\n */\nexport class ControllerMessenger<\n  Action extends ActionConstraint,\n  Event extends EventConstraint\n> {\n  private actions = new Map<Action['type'], unknown>();\n\n  private events = new Map<Event['type'], Set<unknown>>();\n\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler- The action handler. This function gets called when the `call` method is\n   *   invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   */\n  registerActionHandler<T extends Action['type']>(\n    actionType: T,\n    handler: ActionHandler<Action, T>,\n  ) {\n    if (this.actions.has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`,\n      );\n    }\n    this.actions.set(actionType, handler);\n  }\n\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   */\n  unregisterActionHandler<T extends Action['type']>(actionType: T) {\n    this.actions.delete(actionType);\n  }\n\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    this.actions.clear();\n  }\n\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   *   registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   */\n  call<T extends Action['type']>(\n    actionType: T,\n    ...params: ExtractActionParameters<Action, T>\n  ): ExtractActionResponse<Action, T> {\n    const handler = this.actions.get(actionType) as ActionHandler<Action, T>;\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   *   match the type of this payload.\n   */\n  publish<E extends Event['type']>(\n    eventType: E,\n    ...payload: ExtractEventPayload<Event, E>\n  ) {\n    const subscribers = this.events.get(eventType) as Set<\n      ExtractEventHandler<Event, E>\n    >;\n\n    if (subscribers) {\n      for (const eventHandler of subscribers) {\n        eventHandler(...payload);\n      }\n    }\n  }\n\n  /**\n   * Subscribe to an event.\n   *\n   * Registers the given function as an event handler for the given event type.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler. The type of the parameters for this event handler must\n   *   match the type of the payload for this event type.\n   */\n  subscribe<E extends Event['type']>(\n    eventType: E,\n    handler: ExtractEventHandler<Event, E>,\n  ) {\n    let subscribers = this.events.get(eventType);\n    if (!subscribers) {\n      subscribers = new Set();\n    }\n    subscribers.add(handler);\n    this.events.set(eventType, subscribers);\n  }\n\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   */\n  unsubscribe<E extends Event['type']>(\n    eventType: E,\n    handler: ExtractEventHandler<Event, E>,\n  ) {\n    const subscribers = this.events.get(eventType);\n\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: '${eventType}'`);\n    }\n\n    subscribers.delete(handler);\n    this.events.set(eventType, subscribers);\n  }\n\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   */\n  clearEventSubscriptions<E extends Event['type']>(eventType: E) {\n    this.events.delete(eventType);\n  }\n\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    this.events.clear();\n  }\n\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   *   controller name). This grants \"ownership\" of actions and events under this namespace to the\n   *   restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   *   should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   *   should be allowed to subscribe to.\n   */\n  getRestricted<\n    N extends string,\n    AllowedAction extends string,\n    AllowedEvent extends string\n  >({\n    name,\n    allowedActions,\n    allowedEvents,\n  }: {\n    name: N;\n    allowedActions: Extract<Action['type'], AllowedAction>[] | [];\n    allowedEvents: Extract<Event['type'], AllowedEvent>[] | [];\n  }) {\n    return new RestrictedControllerMessenger<\n      N,\n      Action,\n      Event,\n      AllowedAction,\n      AllowedEvent\n    >({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents,\n    });\n  }\n}\n"]}