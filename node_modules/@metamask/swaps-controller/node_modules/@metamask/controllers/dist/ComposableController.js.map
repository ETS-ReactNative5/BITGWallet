{"version":3,"file":"ComposableController.js","sourceRoot":"","sources":["../src/ComposableController.ts"],"names":[],"mappings":";;;;;;AAAA,sEAA8C;AAO9C;;GAEG;AACH,MAAa,oBAAqB,SAAQ,wBAA0B;IAQlE;;;;;OAKG;IACH,YAAY,WAA2B;QACrC,KAAK,CACH,SAAS,EACT,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE;YACvC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;YAC1C,OAAO,KAAK,CAAC;QACf,CAAC,EAAE,EAAS,CAAC,CACd,CAAC;QApBI,gBAAW,GAAmB,EAAE,CAAC;QAEzC;;WAEG;QACH,SAAI,GAAG,sBAAsB,CAAC;QAgB5B,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACtC,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;YAC5B,UAAU,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC7B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,IAAI,SAAS;QACX,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE;YACzC,SAAS,mCAAQ,SAAS,GAAK,UAAU,CAAC,KAAK,CAAE,CAAC;SACnD;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA9CD,oDA8CC;AAED,kBAAe,oBAAoB,CAAC","sourcesContent":["import BaseController from './BaseController';\n\n/**\n * List of child controller instances\n */\nexport type ControllerList = BaseController<any, any>[];\n\n/**\n * Controller that can be used to compose multiple controllers together\n */\nexport class ComposableController extends BaseController<never, any> {\n  private controllers: ControllerList = [];\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'ComposableController';\n\n  /**\n   * Creates a ComposableController instance\n   *\n   * @param controllers - Map of names to controller instances\n   * @param initialState - Initial state keyed by child controller name\n   */\n  constructor(controllers: ControllerList) {\n    super(\n      undefined,\n      controllers.reduce((state, controller) => {\n        state[controller.name] = controller.state;\n        return state;\n      }, {} as any),\n    );\n    this.initialize();\n    this.controllers = controllers;\n    this.controllers.forEach((controller) => {\n      const { name } = controller;\n      controller.subscribe((state) => {\n        this.update({ [name]: state });\n      });\n    });\n  }\n\n  /**\n   * Flat state representation, one that isn't keyed\n   * of controller name. Instead, all child controller state is merged\n   * together into a single, flat object.\n   *\n   * @returns - Merged state representation of all child controllers\n   */\n  get flatState() {\n    let flatState = {};\n    for (const controller of this.controllers) {\n      flatState = { ...flatState, ...controller.state };\n    }\n    return flatState;\n  }\n}\n\nexport default ComposableController;\n"]}