{"version":3,"file":"CurrencyRateController.js","sourceRoot":"","sources":["../../src/assets/CurrencyRateController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Mutex } from 'async-mutex';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute } from '../util';\nimport { fetchExchangeRate as defaultFetchExchangeRate } from '../apis/crypto-compare';\n\n/**\n * @type CurrencyRateConfig\n *\n * Currency rate controller configuration\n *\n * @property currentCurrency - Currently-active ISO 4217 currency code\n * @property interval - Polling interval used to fetch new currency rate\n * @property nativeCurrency - Symbol for the base asset used for conversion\n * @property includeUSDRate - Whether to include the usd rate in addition to the currentCurrency\n */\nexport interface CurrencyRateConfig extends BaseConfig {\n  currentCurrency: string;\n  interval: number;\n  nativeCurrency: string;\n  includeUSDRate?: boolean;\n}\n\n/**\n * @type CurrencyRateState\n *\n * Currency rate controller state\n *\n * @property conversionDate - Timestamp of conversion rate expressed in ms since UNIX epoch\n * @property conversionRate - Conversion rate from current base asset to the current currency\n * @property currentCurrency - Currently-active ISO 4217 currency code\n * @property nativeCurrency - Symbol for the base asset used for conversion\n * @property usdConversionRate - Conversion rate from usd to the current currency\n */\nexport interface CurrencyRateState extends BaseState {\n  conversionDate: number;\n  conversionRate: number;\n  currentCurrency: string;\n  nativeCurrency: string;\n  usdConversionRate?: number;\n}\n\n/**\n * Controller that passively polls on a set interval for an exchange rate from the current base\n * asset to the current currency\n */\nexport class CurrencyRateController extends BaseController<\n  CurrencyRateConfig,\n  CurrencyRateState\n> {\n  /* Optional config to include conversion to usd in all price url fetches and on state */\n  includeUSDRate?: boolean;\n\n  private activeCurrency = '';\n\n  private activeNativeCurrency = '';\n\n  private mutex = new Mutex();\n\n  private handle?: NodeJS.Timer;\n\n  private fetchExchangeRate: typeof defaultFetchExchangeRate;\n\n  private getCurrentCurrencyFromState(state?: Partial<CurrencyRateState>) {\n    return state?.currentCurrency ? state.currentCurrency : 'usd';\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'CurrencyRateController';\n\n  /**\n   * Creates a CurrencyRateController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(\n    config?: Partial<CurrencyRateConfig>,\n    state?: Partial<CurrencyRateState>,\n    fetchExchangeRate = defaultFetchExchangeRate,\n  ) {\n    super(config, state);\n    this.fetchExchangeRate = fetchExchangeRate;\n    this.defaultConfig = {\n      currentCurrency: this.getCurrentCurrencyFromState(state),\n      disabled: true,\n      interval: 180000,\n      nativeCurrency: 'ETH',\n      includeUSDRate: false,\n    };\n    this.defaultState = {\n      conversionDate: 0,\n      conversionRate: 0,\n      currentCurrency: this.defaultConfig.currentCurrency,\n      nativeCurrency: this.defaultConfig.nativeCurrency,\n      usdConversionRate: 0,\n    };\n    this.initialize();\n    this.configure({ disabled: false }, false, false);\n    this.poll();\n  }\n\n  /**\n   * Sets a currency to track\n   *\n   * TODO: Replace this wth a method\n   *\n   * @param currentCurrency - ISO 4217 currency code\n   */\n  set currentCurrency(currentCurrency: string) {\n    this.activeCurrency = currentCurrency;\n    safelyExecute(() => this.updateExchangeRate());\n  }\n\n  get currentCurrency() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Sets a new native currency\n   *\n   * TODO: Replace this wth a method\n   *\n   * @param symbol - Symbol for the base asset\n   */\n  set nativeCurrency(symbol: string) {\n    this.activeNativeCurrency = symbol;\n    safelyExecute(() => this.updateExchangeRate());\n  }\n\n  get nativeCurrency() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval used to fetch new exchange rate\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateExchangeRate());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Updates exchange rate for the current currency\n   *\n   * @returns Promise resolving to currency data or undefined if disabled\n   */\n  async updateExchangeRate(): Promise<CurrencyRateState | void> {\n    if (this.disabled || !this.activeCurrency || !this.activeNativeCurrency) {\n      return undefined;\n    }\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const {\n        conversionDate,\n        conversionRate,\n        usdConversionRate,\n      } = await this.fetchExchangeRate(\n        this.activeCurrency,\n        this.activeNativeCurrency,\n        this.includeUSDRate,\n      );\n      const newState: CurrencyRateState = {\n        conversionDate,\n        conversionRate,\n        currentCurrency: this.activeCurrency,\n        nativeCurrency: this.activeNativeCurrency,\n        usdConversionRate: this.includeUSDRate\n          ? usdConversionRate\n          : this.defaultState.usdConversionRate,\n      };\n      this.update(newState);\n\n      return this.state;\n    } finally {\n      releaseLock();\n    }\n  }\n}\n\nexport default CurrencyRateController;\n"]}