import BaseController, { BaseConfig, BaseState } from '../BaseController';
import { fetchExchangeRate as defaultFetchExchangeRate } from '../apis/crypto-compare';
/**
 * @type CurrencyRateConfig
 *
 * Currency rate controller configuration
 *
 * @property currentCurrency - Currently-active ISO 4217 currency code
 * @property interval - Polling interval used to fetch new currency rate
 * @property nativeCurrency - Symbol for the base asset used for conversion
 * @property includeUSDRate - Whether to include the usd rate in addition to the currentCurrency
 */
export interface CurrencyRateConfig extends BaseConfig {
    currentCurrency: string;
    interval: number;
    nativeCurrency: string;
    includeUSDRate?: boolean;
}
/**
 * @type CurrencyRateState
 *
 * Currency rate controller state
 *
 * @property conversionDate - Timestamp of conversion rate expressed in ms since UNIX epoch
 * @property conversionRate - Conversion rate from current base asset to the current currency
 * @property currentCurrency - Currently-active ISO 4217 currency code
 * @property nativeCurrency - Symbol for the base asset used for conversion
 * @property usdConversionRate - Conversion rate from usd to the current currency
 */
export interface CurrencyRateState extends BaseState {
    conversionDate: number;
    conversionRate: number;
    currentCurrency: string;
    nativeCurrency: string;
    usdConversionRate?: number;
}
/**
 * Controller that passively polls on a set interval for an exchange rate from the current base
 * asset to the current currency
 */
export declare class CurrencyRateController extends BaseController<CurrencyRateConfig, CurrencyRateState> {
    includeUSDRate?: boolean;
    private activeCurrency;
    private activeNativeCurrency;
    private mutex;
    private handle?;
    private fetchExchangeRate;
    private getCurrentCurrencyFromState;
    /**
     * Name of this controller used during composition
     */
    name: string;
    /**
     * Creates a CurrencyRateController instance
     *
     * @param config - Initial options used to configure this controller
     * @param state - Initial state to set on this controller
     */
    constructor(config?: Partial<CurrencyRateConfig>, state?: Partial<CurrencyRateState>, fetchExchangeRate?: typeof defaultFetchExchangeRate);
    /**
     * Sets a currency to track
     *
     * TODO: Replace this wth a method
     *
     * @param currentCurrency - ISO 4217 currency code
     */
    set currentCurrency(currentCurrency: string);
    get currentCurrency(): string;
    /**
     * Sets a new native currency
     *
     * TODO: Replace this wth a method
     *
     * @param symbol - Symbol for the base asset
     */
    set nativeCurrency(symbol: string);
    get nativeCurrency(): string;
    /**
     * Starts a new polling interval
     *
     * @param interval - Polling interval used to fetch new exchange rate
     */
    poll(interval?: number): Promise<void>;
    /**
     * Updates exchange rate for the current currency
     *
     * @returns Promise resolving to currency data or undefined if disabled
     */
    updateExchangeRate(): Promise<CurrencyRateState | void>;
}
export default CurrencyRateController;
