{"version":3,"file":"AccountTrackerController.js","sourceRoot":"","sources":["../../src/assets/AccountTrackerController.ts"],"names":[],"mappings":"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","sourcesContent":["import EthQuery from 'eth-query';\nimport { Mutex } from 'async-mutex';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { PreferencesState } from '../user/PreferencesController';\nimport { BNToHex, safelyExecuteWithTimeout } from '../util';\n\n/**\n * @type AccountInformation\n *\n * Account information object\n *\n * @property balance - Hex string of an account balancec in wei\n */\nexport interface AccountInformation {\n  balance: string;\n}\n\n/**\n * @type AccountTrackerConfig\n *\n * Account tracker controller configuration\n *\n * @property provider - Provider used to create a new underlying EthQuery instance\n */\nexport interface AccountTrackerConfig extends BaseConfig {\n  interval: number;\n  provider?: any;\n}\n\n/**\n * @type AccountTrackerState\n *\n * Account tracker controller state\n *\n * @property accounts - Map of addresses to account information\n */\nexport interface AccountTrackerState extends BaseState {\n  accounts: { [address: string]: AccountInformation };\n}\n\n/**\n * Controller that tracks information for all accounts in the current keychain\n */\nexport class AccountTrackerController extends BaseController<\n  AccountTrackerConfig,\n  AccountTrackerState\n> {\n  private ethQuery: any;\n\n  private mutex = new Mutex();\n\n  private handle?: NodeJS.Timer;\n\n  private api:any;\n\n  private syncAccounts() {\n    const { accounts } = this.state;\n    const addresses = Object.keys(this.getIdentities());\n    const existing = Object.keys(accounts);\n    const newAddresses = addresses.filter(\n      (address) => existing.indexOf(address) === -1,\n    );\n    const oldAddresses = existing.filter(\n      (address) => addresses.indexOf(address) === -1,\n    );\n    newAddresses.forEach((address) => {\n      accounts[address] = { balance: '0x0' };\n    });\n    oldAddresses.forEach((address) => {\n      delete accounts[address];\n    });\n    this.update({ accounts: { ...accounts } });\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'AccountTrackerController';\n  \n  public   setPolkaApi(api:any) {\n    console.log('setPolkaApi')\n    this.api = api;\n    // this.update({api})\n    this.refresh();\n  }\n\n  private getIdentities: () => PreferencesState['identities'];\n\n  /**\n   * Creates an AccountTracker instance\n   *\n   * @param options\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes\n   * @param options.getIdentities - Gets the identities from the Preferences store\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(\n    {\n      onPreferencesStateChange,\n      getIdentities,\n    }: {\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      getIdentities: () => PreferencesState['identities'];\n    },\n    config?: Partial<AccountTrackerConfig>,\n    state?: Partial<AccountTrackerState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 10000,\n    };\n    this.defaultState = { accounts: {} };\n    this.initialize();\n    this.getIdentities = getIdentities;\n    onPreferencesStateChange(() => {\n      this.refresh();\n    });\n    this.poll();\n  }\n\n  /**\n   * Sets a new provider\n   *\n   * TODO: Replace this wth a method\n   *\n   * @param provider - Provider used to create a new underlying EthQuery instance\n   */\n  set provider(provider: any) {\n    this.ethQuery = new EthQuery(provider);\n  }\n\n  get provider() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval trigger a 'refresh'\n   */\n  async poll(interval?: number): Promise<void> {\n    const releaseLock = await this.mutex.acquire();\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await this.refresh();\n    this.handle = setTimeout(() => {\n      releaseLock();\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Refreshes all accounts in the current keychain\n   */\n  refresh = async () => {\n    this.syncAccounts();\n    const { accounts } = this.state;\n    for (const address in accounts) {\n      await safelyExecuteWithTimeout(async () => {\n        // const balance = await query(this.ethQuery, 'getBalance', [address]);\n        let balance = 0;\n\n        if(this.ethQuery){\n          balance = 0;\n        }\n\n        // console.log('address:',address)\n\n        if(this.api){\n            // console.log('this.api:')\n            let { data: { free } } = await this.api.query.system.account(address);\n            balance = free;\n            // console.log('get balance:',free,address)\n        }\n\n        accounts[address] = { balance: BNToHex(balance) };\n        this.update({ accounts: { ...accounts } });\n      });\n    }\n  };\n}\n\nexport default AccountTrackerController;\n"]}