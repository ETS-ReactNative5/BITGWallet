{"version":3,"file":"TokenBalancesController.js","sourceRoot":"","sources":["../../src/assets/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qDAAqC;AAS5B,mFATA,oBAAE,OASA;AARX,uEAA0E;AAC1E,kCAAwC;AAiCxC;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,wBAG5C;IAoBC;;;;;;;;;OASG;IACH,YACE,EACE,mBAAmB,EACnB,kBAAkB,EAClB,YAAY,GAOb,EACD,MAAqC,EACrC,KAAmC;QAEnC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAxCvB;;WAEG;QACH,SAAI,GAAG,yBAAyB,CAAC;QAsC/B,IAAI,CAAC,aAAa,GAAG;YACnB,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,EAAE;SACX,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,EAAE,gBAAgB,EAAE,EAAE,EAAE,CAAC;QAC7C,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,mBAAmB,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;YACjC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAC3B,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAjDM,WAAW,CAAC,GAAO;QACxB,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAA;QAClD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,qBAAqB;IACvB,CAAC;IA+CD;;;;OAIG;IACG,IAAI,CAAC,QAAiB;;YAC1B,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,oBAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;KAAA;IAED;;;;OAIG;IACG,cAAc;;YAClB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO;aACR;YACD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;YAC/B,MAAM,mBAAmB,GAA8B,EAAE,CAAC;YAC1D,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACtB,MAAM,EAAE,OAAO,EAAC,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACtC,IAAI;oBACF,IAAG,OAAO,EAAC;wBACT,IAAG,IAAI,CAAC,GAAG,EAAC;4BACV,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;4BACvF,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,EAAC,MAAM,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAA;4BACzE,mBAAmB,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;4BAC7C,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;yBAC/B;6BAAI;4BACH,mBAAmB,CAAC,OAAO,CAAC,GAAG,IAAI,oBAAE,CAAC,CAAC,CAAC,CAAC;yBAC1C;qBACF;yBAAM;wBACL,mBAAmB,CAAC,OAAO,CAAC,GAAG,MAAM,IAAI,CAAC,YAAY,CACpD,OAAO,EACP,IAAI,CAAC,kBAAkB,EAAE,CAC1B,CAAC;wBACF,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;qBAC/B;iBAEF;gBAAC,OAAO,KAAK,EAAE;oBACd,mBAAmB,CAAC,OAAO,CAAC,GAAG,IAAI,oBAAE,CAAC,CAAC,CAAC,CAAC;oBACzC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,KAAK,CAAC;iBAChC;aACF;YACD,IAAI,CAAC,MAAM,CAAC,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,CAAC,CAAC;QACzD,CAAC;KAAA;CACF;AApHD,0DAoHC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import { BN } from 'ethereumjs-util';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute } from '../util';\nimport type { PreferencesState } from '../user/PreferencesController';\nimport { Token } from './TokenRatesController';\nimport type { AssetsState } from './AssetsController';\nimport type { AssetsContractController } from './AssetsContractController';\n\n// TODO: Remove this export in the next major release\nexport { BN };\n\n/**\n * @type TokenBalancesConfig\n *\n * Token balances controller configuration\n *\n * @property interval - Polling interval used to fetch new token balances\n * @property tokens - List of tokens to track balances for\n */\nexport interface TokenBalancesConfig extends BaseConfig {\n  interval: number;\n  tokens: Token[];\n}\n\n/**\n * @type TokenBalancesState\n *\n * Token balances controller state\n *\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport interface TokenBalancesState extends BaseState {\n  contractBalances: { [address: string]: BN };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the AssetsController\n */\nexport class TokenBalancesController extends BaseController<\n  TokenBalancesConfig,\n  TokenBalancesState\n> {\n  private handle?: NodeJS.Timer;\n\n  private api:any;\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'TokenBalancesController';\n\n  public setPolkaApi(api:any) {\n    console.log('TokenBalancesController setPolkaApi')\n    this.api = api;\n    // this.update({api})\n  }\n\n  private getSelectedAddress: () => PreferencesState['selectedAddress'];\n\n  private getBalanceOf: AssetsContractController['getBalanceOf'];\n\n  /**\n   * Creates a TokenBalancesController instance\n   *\n   * @param options\n   * @param options.onAssetsStateChange - Allows subscribing to assets controller state changes\n   * @param options.getSelectedAddress - Gets the current selected address\n   * @param options.getBalanceOf - Gets the balance of the given account at the given contract address\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(\n    {\n      onAssetsStateChange,\n      getSelectedAddress,\n      getBalanceOf,\n    }: {\n      onAssetsStateChange: (\n        listener: (tokenState: AssetsState) => void,\n      ) => void;\n      getSelectedAddress: () => PreferencesState['selectedAddress'];\n      getBalanceOf: AssetsContractController['getBalanceOf'];\n    },\n    config?: Partial<TokenBalancesConfig>,\n    state?: Partial<TokenBalancesState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 180000,\n      tokens: [],\n    };\n    this.defaultState = { contractBalances: {} };\n    this.initialize();\n    onAssetsStateChange(({ tokens }) => {\n      this.configure({ tokens });\n      this.updateBalances();\n    });\n    this.getSelectedAddress = getSelectedAddress;\n    this.getBalanceOf = getBalanceOf;\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval used to fetch new token balances\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateBalances());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Updates balances for all tokens\n   *\n   * @returns Promise resolving when this operation completes\n   */\n  async updateBalances() {\n    if (this.disabled) {\n      return;\n    }\n    const { tokens } = this.config;\n    const newContractBalances: { [address: string]: BN } = {};\n    for (const i in tokens) {\n      const { address,assetid } = tokens[i];\n      try {\n        if(assetid){\n          if(this.api){\n            const amount = await this.api.query.assets.account(assetid, this.getSelectedAddress());\n            console.log('token balance:', amount,tokens[i],this.getSelectedAddress())\n            newContractBalances[assetid] = amount.balance\n            tokens[i].balanceError = null;\n          }else{\n            newContractBalances[assetid] = new BN(0);\n          }\n        } else {\n          newContractBalances[address] = await this.getBalanceOf(\n            address,\n            this.getSelectedAddress(),\n          );\n          tokens[i].balanceError = null;\n        }\n\n      } catch (error) {\n        newContractBalances[address] = new BN(0);\n        tokens[i].balanceError = error;\n      }\n    }\n    this.update({ contractBalances: newContractBalances });\n  }\n}\n\nexport default TokenBalancesController;\n"]}